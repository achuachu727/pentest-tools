#!/usr/bin/env python3

import os
import subprocess
import multiprocessing
from tqdm import tqdm

def execute_command(args):
    command, ip_address = args
    try:
        full_command = f"{command} {ip_address}"
        result = subprocess.check_output(full_command, shell=True, stderr=subprocess.STDOUT)
        return command, ip_address, result.decode('utf-8')
    except subprocess.CalledProcessError as e:
        return command, ip_address, str(e.output.decode('utf-8'))

def process_commands_with_progress(commands, ip_file):
    command_list = commands.split(',')
    with open(ip_file, 'r') as f:
        ip_addresses = f.read().splitlines()

    num_ips = len(ip_addresses)
    args_list = [(command, ip) for ip in ip_addresses for command in command_list]

    with multiprocessing.Pool() as pool:
        results = list(tqdm(pool.imap(execute_command, args_list), total=num_ips * len(command_list), desc="Executing commands"))

    # Save results to separate files for each command
    for command in command_list:
        with open(f"{command}_output.txt", 'w') as f:
            for cmd, ip, result in results:
                if cmd == command:
                    f.write(f"Command: {cmd} {ip}\nResult:\n{result}\n")

if __name__ == "__main__":
    # Get the filename/path for the IP addresses file from the user
    ip_file = input("Enter the filename/path for the IP addresses file: ")

    # Get the commands from the user, separated by commas
    commands = input("Enter the commands (separated by commas): ")

    process_commands_with_progress(commands, ip_file)

    print("Results have been saved to separate files for each command.")
