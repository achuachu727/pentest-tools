import os
import socket
import ipaddress
import subprocess
from tqdm import tqdm
from multiprocessing import Pool, cpu_count

def ping_ip(ip):
    try:
        subprocess.check_output(['ping', '-c', '1', '-W', '1', ip], stderr=subprocess.STDOUT)
        return (ip, True)  # Return reachable IPs as a tuple (ip, True)
    except subprocess.CalledProcessError:
        return (ip, False)  # Return non-reachable IPs as a tuple (ip, False)

def scan_ip_range(network):
    ip_net = ipaddress.ip_network(network)
    total_ips = ip_net.num_addresses

    with Pool(processes=cpu_count()) as pool:
        results = list(tqdm(pool.imap(ping_ip, map(str, ip_net)), total=total_ips, desc="Scanning IPs", unit="ip"))

    return results

if __name__ == "__main__":
    input_network = input("Enter the IP network in CIDR notation (e.g., 192.168.1.0/24): ")
    reachable_file = "All-ips/reach/reach.txt"
    non_reachable_file = "All-ips/reach/nonreach.txt"

    # Create the 'reach' folder if it doesn't exist
    if not os.path.exists("All-ips/reach"):
        os.makedirs("All-ips/reach")

    # Clear existing files if present
    with open(reachable_file, 'w') as file:
        pass
    with open(non_reachable_file, 'w') as file:
        pass

    scan_results = scan_ip_range(input_network)

    reachable_count = 0
    non_reachable_count = 0

    for ip, is_reachable in scan_results:
        with open(reachable_file if is_reachable else non_reachable_file, 'a') as file:
            file.write(f"{ip} \n" if is_reachable else f"{ip} \n")
        
        if is_reachable:
            reachable_count += 1
        else:
            non_reachable_count += 1

    print(f"Total reachable IPs: {reachable_count}")
    print(f"Total non-reachable IPs: {non_reachable_count}")
